substitutions:
  device_name: kitchen-light-controller
  device_friendly_name: Kitchen Light Controller
  device_comment: Controls lights and sensors related to the kitchen rack
  ld2450_tx_pin: GPIO17
  ld2450_rx_pin: GPIO16
  dallas_pin: "14"
  dallas_address: "0x7a0316a279cffc28"
  dallas_name: "PCB temperature"

packages:
  basics: !include .basics.yaml
  ld2450: !include sensors/ld2450.yaml
  dallas: !include sensors/dallas.yaml

esp32:
  board: nodemcu-32s
  framework:
    type: arduino

# Enable logging
logger:
  #level: VERY_VERBOSE
  level: WARN

# Enable Home Assistant API
api:
  encryption:
    key: !secret apikey_kitchen_light_controller

ota:
  - platform: esphome
    password: !secret otapwd_kitchen_light_controller

i2c:
  sda: 21
  scl: 22
  scan: True
  id: bus_a
  frequency: 400kHz

globals:
    # Indicates which lights are currently controlled by the rotary encoder button
  - id: currently_controlled_lights
    type: bool
    restore_value: no
    initial_value: 'true' # True == Table, False == Roof

    # Indicates how many time is left on the manual timer override
  - id: timer_manual_control_mode
    type: unsigned int
    restore_value: yes
    initial_value: '0'

    # The default time the manual override lasts
  - id: int_timer_duration
    type: unsigned int
    restore_value: yes
    initial_value: '3600'

switch:
  - platform: template
    name: "Manual override"
    id: manual_override_switch
    optimistic: true
    lambda: |-
        return id(timer_manual_control_mode) > 0;
    turn_on_action:
      - lambda: |-
          id(timer_manual_control_mode) = id(int_timer_duration);
    turn_off_action:
      - lambda: |-
          id(timer_manual_control_mode) = 0;
          id(currently_controlled_lights) = true;

power_supply:
  - id: 'power_supply_led1'
    pin: 
      number: 3
      inverted: True
    keep_on_time: 0s
  - id: 'power_supply_led2'
    pin: 
      number: 5
      inverted: True
    keep_on_time: 0s

output:
  - platform: ledc
    pin: 32
    frequency: 1000 Hz
    id: pwm_led1
    max_power: 0.60
    power_supply: power_supply_led1
    zero_means_zero: True

  - platform: ledc
    pin: 33
    frequency: 1000 Hz
    id: pwm_led2
    max_power: 0.90
    power_supply: power_supply_led2
    zero_means_zero: True

  - platform: ledc
    pin: 26
    frequency: 25000 Hz
    id: pwm_fan1
    min_power: 0
    zero_means_zero: True

  - platform: ledc
    pin: 4
    frequency: 25000 Hz
    id: pwm_fan2
    min_power: 0
    zero_means_zero: True

light:
  - platform: monochromatic
    id: led_table
    output: pwm_led1
    name: "LED Table"
    default_transition_length: 3s
    flash_transition_length: 0.3s
    # The relay output will show a very short burst of light before transitioning. It's preferable to turn on (almost) instantly instead, much more responsive
    on_turn_on:
      - light.turn_on:
          id: led_table
          transition_length: 0.1s      

  - platform: monochromatic
    id: led_roof
    output: pwm_led2
    name: "LED Roof"
    default_transition_length: 2s
    flash_transition_length: 0.3s
    # The relay output will show a very short burst of light before transitioning. It's preferable to turn on (almost) instantly instead, much more responsive
    on_turn_on:
      - light.turn_on:
          id: led_roof
          transition_length: 0.1s
    on_state:
      - lambda: |-
          float brightness;
          float fan_intensity;
          id(led_roof).remote_values.as_brightness(&brightness);
          // Fan should only come on when we are at least 80% brightness
          if (brightness >= 0.8) {
              // Linear curve: 80% LED => 30% fan. 90% LED => 65% fan. 100% LED => 100% fan.
              fan_intensity = 1 - (1 - brightness) * 3.5;
              id(frontend_fan1_speed).turn_on().set_speed(fan_intensity * 100.0).perform();
              id(frontend_fan2_speed).turn_on().set_speed(fan_intensity * 100.0).perform();
          } else {
              // Stop fans from working
              id(frontend_fan1_speed).turn_off().perform();
              id(frontend_fan2_speed).turn_off().perform();
          }

fan:
  - platform: speed
    id: frontend_fan1_speed
    output: pwm_fan1
    name: "Fan1 speed"

  - platform: speed
    id: frontend_fan2_speed
    output: pwm_fan2
    name: "Fan2 speed"

binary_sensor:
  - platform: gpio
    pin: 23
    id: rotary_button_press
    name: "Rotary Button Press"
    filters:
      - invert
    on_press:
      then:
        - lambda: |-
            //float brightness;
            id(currently_controlled_lights) = !id(currently_controlled_lights);
            //if (id(currently_controlled_lights) == true) {
            //    id(led_table).remote_values.as_brightness(&brightness);
            //    if (brightness > 0.00) {
            //        id(led_table).flash().perform();
                    //id(led_table).set_transition_length(0.2).set_brightness(brightness + 0.05).perform();
                    //id(led_table).set_transition_length(0.2).set_brightness(brightness).perform();
            //    }
            //} else {
            //    id(led_roof).remote_values.as_brightness(&brightness);
            //    if (brightness > 0.00) {
                    //id(led_roof).start_flash_().perform();
                    //id(led_roof).set_transition_length(0.2).set_brightness(brightness + 0.05).perform();
                    //id(led_roof).set_transition_length(0.2).set_brightness(brightness).perform();
            //    }
            //}

# Since we have a menu timer, this interval runs in an eternal loop every second and adjusts the timer accordingly
interval:
  - interval: 1sec
    then:
      - lambda: |-
          if (id(timer_manual_control_mode) > 0) {
              // Ensure to only update frontend once per minute when it corresponds
              if (id(timer_manual_control_mode) % 60 == 0) {
                  auto call = id(frontend_clock_timer_disable).make_call();
                  call.set_value(ceil(id(timer_manual_control_mode) / 60));
                  call.perform();
              }
              id(timer_manual_control_mode)--;
              // If timer reaches 0, reset mode back to default and timer back to 0 as well
              if (id(timer_manual_control_mode) == 0) {
                  id(currently_controlled_lights) = true;
                  id(frontend_clock_timer_disable).make_call().set_value(0).perform();
              }
          }

number:
  # Exposes a timer (in hours) to HA that will disable clock mode
  - platform: template
    id: frontend_clock_timer_disable
    name: "Timer clock disable"
    unit_of_measurement: minutes
    optimistic: true
    mode: slider
    max_value: 60
    min_value: 0
    step: 1
    set_action:
      - lambda: |-
          id(timer_manual_control_mode) = x * 60;

sensor:
  - platform: pulse_counter
    pin: 27
    name: Fan 1 RPM
    id: fan1_pulse
    unit_of_measurement: 'RPM'
    filters:
      - multiply: 0.5
    count_mode:
      rising_edge: INCREMENT
      falling_edge: DISABLE
    update_interval: 3s

  - platform: pulse_counter
    pin: 2
    name: Fan 2 RPM
    id: fan2_pulse
    unit_of_measurement: 'RPM'
    filters:
      - multiply: 0.5
    count_mode:
      rising_edge: INCREMENT
      falling_edge: DISABLE
    update_interval: 3s

  - platform: bh1750
    name: "Illuminance"
    address: 0x23
    update_interval: 60s

  - platform: rotary_encoder
    name: "Rotary Encoder"
    pin_a: 18
    pin_b: 19
    resolution: 1
    accuracy_decimals: 0
    on_clockwise:
      - lambda: |-
          float brightness;
          id(timer_manual_control_mode) = id(int_timer_duration);
          // TODO This code could use some optimization... but it works for now
          if (id(currently_controlled_lights) == true) {
              id(led_table).remote_values.as_brightness(&brightness);
              if (brightness < 0.1) {
                  brightness += 0.05;
              }
              id(led_table).turn_on().set_transition_length(0).set_brightness(brightness + 0.01).perform();
          } else {
              id(led_roof).remote_values.as_brightness(&brightness);
              if (brightness < 0.1) {
                  brightness += 0.05;
              }
              id(led_roof).turn_on().set_transition_length(0).set_brightness(brightness + 0.01).perform();
          }

    on_anticlockwise:
      - lambda: |-
          float brightness;
          float new_brightness;
          id(timer_manual_control_mode) = id(int_timer_duration);
          if (id(currently_controlled_lights) == true) {
              id(led_table).remote_values.as_brightness(&brightness);
              if (brightness < 0.1) {
                  brightness -= 0.05;
              }
              new_brightness = brightness - 0.01;
              if (new_brightness == 0.00) {
                  id(led_table).turn_off().perform();
              } else {
                  id(led_table).turn_on().set_transition_length(0).set_brightness(new_brightness).perform();
              }
          } else {
              id(led_roof).remote_values.as_brightness(&brightness);
              if (brightness < 0.1) {
                  brightness -= 0.05;
              }
              new_brightness = brightness - 0.01;
              if (new_brightness == 0.00) {
                  id(led_roof).turn_off().perform();
              } else {
                  id(led_roof).turn_on().set_transition_length(0).set_brightness(new_brightness).perform();
              }
          }

