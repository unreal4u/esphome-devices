esphome:
  name: kitchen-light-controller
  friendly_name: Kitchen Light Controller
  comment: Controls lights and sensors related to the kitchen rack
  on_boot: 
    priority: -100
    then:
      - binary_sensor.template.publish:
          id: zone1_occupancy
          state: false 
      - binary_sensor.template.publish:
          id: zone2_occupancy
          state: false 
      - binary_sensor.template.publish:
          id: zone3_occupancy
          state: false 
      - binary_sensor.template.publish:
          id: zone4_occupancy
          state: false

esp32:
  board: nodemcu-32s
  framework:
    type: arduino

external_components:
  - source: github://nrandell/dallasng

# Enable logging
logger:
  #level: VERY_VERBOSE
  level: WARN

# Enable Home Assistant API
api:
  encryption:
    key: !secret apikey_kitchen_light_controller

ota:
  password: !secret otapwd_kitchen_light_controller

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Kitchen-Light-Controller"
    password: "jM5GOV8LCi56"

i2c:
  sda: 21
  scl: 22
  scan: True
  id: bus_a
  frequency: 400kHz

captive_portal:

dallasng:
  - pin: 14
    update_interval: 20s

button:
  - platform: restart
    name: "Restart"

globals:
  - id: mmwave_update_time
    type: unsigned long
    restore_value: no
    initial_value: '0'
  - id: currently_controlled_lights
    type: bool
    restore_value: no
    initial_value: 'true' # True == Table, False == Roof
  - id: timer_manual_control_mode
    type: unsigned int
    restore_value: yes
    initial_value: '0'
  - id: int_timer_duration
    type: unsigned int
    restore_value: yes
    initial_value: '3600'

switch:
  - platform: template
    name: "Manual override"
    id: manual_override_switch
    optimistic: true
    lambda: |-
        return id(timer_manual_control_mode) > 0;
    turn_on_action:
      - lambda: |-
          id(timer_manual_control_mode) = id(int_timer_duration);
    turn_off_action:
      - lambda: |-
          id(timer_manual_control_mode) = 0;

power_supply:
  - id: 'power_supply_led1'
    pin: 
      number: 3
      inverted: True
    keep_on_time: 0s
  - id: 'power_supply_led2'
    pin: 
      number: 5
      inverted: True
    keep_on_time: 0s

output:
  - platform: ledc
    pin: 32
    frequency: 1000 Hz
    id: pwm_led1
    max_power: 0.60
    power_supply: power_supply_led1

  - platform: ledc
    pin: 33
    frequency: 1000 Hz
    id: pwm_led2
    max_power: 0.90
    power_supply: power_supply_led2

  - platform: ledc
    pin: 26
    frequency: 25000 Hz
    id: pwm_fan1
    min_power: 0

  - platform: ledc
    pin: 4
    frequency: 25000 Hz
    id: pwm_fan2
    min_power: 0

light:
  - platform: monochromatic
    id: led_table
    output: pwm_led1
    name: "LED Table"
    default_transition_length: 3s
    # The relay output will show a very short burst of light before transitioning. It's preferable to turn on (almost) instantly instead, much more responsive
    on_turn_on:
      - light.turn_on:
          id: led_table
          transition_length: 0.1s

  - platform: monochromatic
    id: led_roof
    output: pwm_led2
    name: "LED Roof"
    default_transition_length: 2s
    # The relay output will show a very short burst of light before transitioning. It's preferable to turn on (almost) instantly instead, much more responsive
    on_turn_on:
      - light.turn_on:
          id: led_roof
          transition_length: 0.1s
    on_state:
      - lambda: |-
          float brightness;
          float fan_intensity;
          id(led_roof).remote_values.as_brightness(&brightness);
          ESP_LOGW("light-sensors", "Current brightness is %0.02f", brightness);
          if (brightness >= 0.8) {
              fan_intensity = 1-(1-brightness)*3.5;
              ESP_LOGW("light-sensors", "Fan intensity would be: %0.03f", fan_intensity);
          }

fan:
  - platform: speed
    output: pwm_fan1
    name: "Fan1 speed"

  - platform: speed
    output: pwm_fan2
    name: "Fan2 speed"

binary_sensor:
  - platform: gpio
    pin: 23
    id: rotary_button_press
    name: "Rotary Button Press"
    filters:
      - invert
    on_press:
      then:
        - lambda: |-
            id(currently_controlled_lights) = !id(currently_controlled_lights);

  - platform: template
    name: "Occupancy"
    device_class: occupancy
    filters:
      - delayed_off: !lambda return (id(off_delay).state * 1000);
    lambda: |-
      return (id(target1_distance).state != 0
        || id(target2_distance).state != 0
        || id(target3_distance).state != 0);

  - platform: template
    name: "Zone 1 Occupancy"
    id: zone1_occupancy
    filters:
      - delayed_off: !lambda return (id(zone_1_off_delay).state * 1000);

  - platform: template
    name: "Zone 2 Occupancy"
    id: zone2_occupancy
    filters:
      - delayed_off: !lambda return (id(zone_2_off_delay).state * 1000);
    disabled_by_default: true

  - platform: template
    name: "Zone 3 Occupancy"
    id: zone3_occupancy
    filters:
      - delayed_off: !lambda return (id(zone_3_off_delay).state * 1000);
    disabled_by_default: true

  - platform: template
    name: "Zone 4 Occupancy"
    id: zone4_occupancy
    filters:
      - delayed_off: !lambda return (id(zone_4_off_delay).state * 1000);
    disabled_by_default: true

  - platform: template
    name: "Target 1 Active"
    id: target1_active
    lambda: |-
      return id(target1_distance).state != 0;

  - platform: template
    name: "Target 2 Active"
    id: target2_active
    lambda: |-
      return id(target2_distance).state != 0;

  - platform: template
    name: "Target 3 Active"
    id: target3_active
    lambda: |-
      return id(target3_distance).state != 0;

# Since we have a menu timer, this interval runs in an eternal loop every second and adjusts the timer accordingly
interval:
  - interval: 1sec
    then:
      - lambda: |-
          if (id(timer_manual_control_mode) > 0) {
              // Ensure to only update frontend once per minute when it corresponds
              if (id(timer_manual_control_mode) % 60 == 0) {
                  auto call = id(frontend_clock_timer_disable).make_call();
                  call.set_value(ceil(id(timer_manual_control_mode) / 60));
                  call.perform();
              }
              id(timer_manual_control_mode)--;
          }

number:
  # Exposes a timer (in hours) to HA that will disable clock mode
  - platform: template
    id: frontend_clock_timer_disable
    name: "Timer clock disable"
    unit_of_measurement: minutes
    optimistic: true
    mode: slider
    max_value: 60
    min_value: 0
    step: 1
    set_action:
      - lambda: |-
          id(timer_manual_control_mode) = x * 60;

  - platform: template
    name: "Occupancy Off Delay"
    id: off_delay
    max_value: 600
    min_value: 0
    step: 1
    optimistic: True
    restore_value: True
    unit_of_measurement: "s"
    initial_value: 15

  - platform: template
    name: "Max Distance"
    id: distance
    max_value: 600
    min_value: 0
    unit_of_measurement: "cm"
    step: 1
    optimistic: True
    restore_value: True
    initial_value: 600

  - platform: template
    name: "Zone 1 Begin X"
    id: zone1_begin_x
    max_value: 4000
    min_value: -4000
    unit_of_measurement: "mm"
    step: 10
    optimistic: True
    restore_value: True
    initial_value: -4000

  - platform: template
    name: "Zone 1 End X"
    id: zone1_end_x
    max_value: 4000
    min_value: -4000
    unit_of_measurement: "mm"
    step: 10
    optimistic: True
    restore_value: True
    initial_value: 4000

  - platform: template
    name: "Zone 1 Begin Y"
    id: zone1_begin_y
    max_value: 6000
    min_value: 0
    unit_of_measurement: "mm"
    step: 10
    optimistic: True
    restore_value: True
    initial_value: 0

  - platform: template
    name: "Zone 1 End Y"
    id: zone1_end_y
    max_value: 6000
    min_value: 0
    unit_of_measurement: "mm"
    step: 10
    optimistic: True
    restore_value: True
    initial_value: 6000

  - platform: template
    name: "Zone 1 Occupancy Off Delay"
    id: zone_1_off_delay
    max_value: 600
    min_value: 0
    step: 1
    optimistic: True
    restore_value: True
    unit_of_measurement: "s"
    initial_value: 15

  - platform: template
    name: "Zone 2 Begin X"
    id: zone2_begin_x
    max_value: 4000
    min_value: -4000
    unit_of_measurement: "mm"
    step: 10
    optimistic: True
    restore_value: True
    disabled_by_default: true

  - platform: template
    name: "Zone 2 End X"
    id: zone2_end_x
    max_value: 4000
    min_value: -4000
    unit_of_measurement: "mm"
    step: 10
    optimistic: True
    restore_value: True
    disabled_by_default: true

  - platform: template
    name: "Zone 2 Begin Y"
    id: zone2_begin_y
    max_value: 6000
    min_value: 0
    unit_of_measurement: "mm"
    step: 10
    optimistic: True
    restore_value: True
    disabled_by_default: true

  - platform: template
    name: "Zone 2 End Y"
    id: zone2_end_y
    max_value: 6000
    min_value: 0
    unit_of_measurement: "mm"
    step: 10
    optimistic: True
    restore_value: True
    disabled_by_default: true

  - platform: template
    name: "Zone 2 Occupancy Off Delay"
    id: zone_2_off_delay
    max_value: 600
    min_value: 0
    step: 1
    optimistic: True
    restore_value: True
    unit_of_measurement: "s"
    initial_value: 15
    disabled_by_default: true

  - platform: template
    name: "Zone 3 Begin X"
    id: zone3_begin_x
    max_value: 4000
    min_value: -4000
    unit_of_measurement: "mm"
    step: 10
    optimistic: True
    restore_value: True
    disabled_by_default: true

  - platform: template
    name: "Zone 3 End X"
    id: zone3_end_x
    max_value: 4000
    min_value: -4000
    unit_of_measurement: "mm"
    step: 10
    optimistic: True
    restore_value: True
    disabled_by_default: true

  - platform: template
    name: "Zone 3 Begin Y"
    id: zone3_begin_y
    max_value: 6000
    min_value: 0
    unit_of_measurement: "mm"
    step: 10
    optimistic: True
    restore_value: True
    disabled_by_default: true

  - platform: template
    name: "Zone 3 End Y"
    id: zone3_end_y
    max_value: 6000
    min_value: 0
    unit_of_measurement: "mm"
    step: 10
    optimistic: True
    restore_value: True
    disabled_by_default: true

  - platform: template
    name: "Zone 3 Occupancy Off Delay"
    id: zone_3_off_delay
    max_value: 600
    min_value: 0
    step: 1
    optimistic: True
    restore_value: True
    unit_of_measurement: "s"
    initial_value: 15
    disabled_by_default: true

  - platform: template
    name: "Zone 4 Begin X"
    id: zone4_begin_x
    max_value: 4000
    min_value: -4000
    unit_of_measurement: "mm"
    step: 10
    optimistic: True
    restore_value: True
    disabled_by_default: true

  - platform: template
    name: "Zone 4 End X"
    id: zone4_end_x
    max_value: 4000
    min_value: -4000
    unit_of_measurement: "mm"
    step: 10
    optimistic: True
    restore_value: True
    disabled_by_default: true

  - platform: template
    name: "Zone 4 Begin Y"
    id: zone4_begin_y
    max_value: 6000
    min_value: 0
    unit_of_measurement: "mm"
    step: 10
    optimistic: True
    restore_value: True
    disabled_by_default: true

  - platform: template
    name: "Zone 4 End Y"
    id: zone4_end_y
    max_value: 6000
    min_value: 0
    unit_of_measurement: "mm"
    step: 10
    optimistic: True
    restore_value: True
    disabled_by_default: true

  - platform: template
    name: "Zone 4 Occupancy Off Delay"
    id: zone_4_off_delay
    max_value: 600
    min_value: 0
    step: 1
    optimistic: True
    restore_value: True
    unit_of_measurement: "s"
    initial_value: 15
    disabled_by_default: true

sensor:
  # Exposes the uptime in seconds to HA
  - platform: uptime
    name: "uptime"
    update_interval: 30s

  # Exposes wifi signal strength sensor to HA
  - platform: wifi_signal
    name: "WiFi signal"
    update_interval: 30s

  - platform: pulse_counter
    pin: 27
    name: Fan 1 RPM
    id: fan1_pulse
    unit_of_measurement: 'RPM'
    filters:
      - multiply: 0.5
    count_mode:
      rising_edge: INCREMENT
      falling_edge: DISABLE
    update_interval: 3s

  - platform: pulse_counter
    pin: 2
    name: Fan 2 RPM
    id: fan2_pulse
    unit_of_measurement: 'RPM'
    filters:
      - multiply: 0.5
    count_mode:
      rising_edge: INCREMENT
      falling_edge: DISABLE
    update_interval: 3s

  - platform: bh1750
    name: "Illuminance"
    address: 0x23
    update_interval: 60s

  - platform: dallasng
    address: 0x7a0316a279cffc28
    name: "PCB temperature"
    resolution: 12
    filters:
      - filter_out: NAN

  - platform: rotary_encoder
    name: "Rotary Encoder"
    pin_a: 18
    pin_b: 19
    resolution: 1
    accuracy_decimals: 0
    on_clockwise:
      - lambda: |-
          float brightness;
          id(timer_manual_control_mode) = id(int_timer_duration);
          if (id(currently_controlled_lights) == true) {
              id(led_table).remote_values.as_brightness(&brightness);
              if (brightness < 0.1) {
                  brightness += 0.05;
              }
              id(led_table).turn_on().set_transition_length(0).set_brightness(brightness + 0.01).perform();
          } else {
              id(led_roof).remote_values.as_brightness(&brightness);
              if (brightness < 0.1) {
                  brightness += 0.05;
              }
              id(led_roof).turn_on().set_transition_length(0).set_brightness(brightness + 0.01).perform();
          }

    on_anticlockwise:
      - lambda: |-
          float brightness;
          float new_brightness;
          id(timer_manual_control_mode) = id(int_timer_duration);
          if (id(currently_controlled_lights) == true) {
              id(led_table).remote_values.as_brightness(&brightness);
              if (brightness < 0.1) {
                  brightness -= 0.05;
              }
              new_brightness = brightness - 0.01;
              if (new_brightness == 0.00) {
                  id(led_table).turn_off().perform();
              } else {
                  id(led_table).turn_on().set_transition_length(0).set_brightness(new_brightness).perform();
              }
          } else {
              id(led_roof).remote_values.as_brightness(&brightness);
              if (brightness < 0.1) {
                  brightness -= 0.05;
              }
              new_brightness = brightness - 0.01;
              if (new_brightness == 0.00) {
                  id(led_roof).turn_off().perform();
              } else {
                  id(led_roof).turn_on().set_transition_length(0).set_brightness(new_brightness).perform();
              }
          }

  - platform: template
    name: "Target 1 X"
    id: target1_x
    accuracy_decimals: 0
    unit_of_measurement: 'mm'
    state_class: measurement
    device_class: distance

  - platform: template
    name: "Target 1 Y"
    id: target1_y
    accuracy_decimals: 0
    unit_of_measurement: 'mm'
    state_class: measurement
    device_class: distance

  - platform: template
    name: "Target 1 Speed"
    id: target1_speed
    accuracy_decimals: 2
    unit_of_measurement: 'm/s'
    state_class: measurement
    device_class: speed

  - platform: template
    name: "Target 1 Resolution"
    id: target1_resolution
    accuracy_decimals: 0
    unit_of_measurement: 'mm'
    state_class: measurement
    device_class: distance

  - platform: template
    name: "Target 2 X"
    id: target2_x
    accuracy_decimals: 0
    unit_of_measurement: 'mm'
    state_class: measurement
    device_class: distance

  - platform: template
    name: "Target 2 Y"
    id: target2_y
    accuracy_decimals: 0
    unit_of_measurement: 'mm'
    state_class: measurement
    device_class: distance

  - platform: template
    name: "Target 2 Speed"
    id: target2_speed
    accuracy_decimals: 2
    unit_of_measurement: 'm/s'
    state_class: measurement
    device_class: speed

  - platform: template
    name: "Target 2 Resolution"
    id: target2_resolution
    accuracy_decimals: 0
    unit_of_measurement: 'mm'
    state_class: measurement
    device_class: distance

  - platform: template
    name: "Target 3 X"
    id: target3_x
    accuracy_decimals: 0
    unit_of_measurement: 'mm'
    state_class: measurement
    device_class: distance

  - platform: template
    name: "Target 3 Y"
    id: target3_y
    accuracy_decimals: 0
    unit_of_measurement: 'mm'
    state_class: measurement
    device_class: distance

  - platform: template
    name: "Target 3 Speed"
    id: target3_speed
    accuracy_decimals: 2
    unit_of_measurement: 'm/s'
    state_class: measurement
    device_class: speed

  - platform: template
    name: "Target 3 Resolution"
    id: target3_resolution
    accuracy_decimals: 0
    unit_of_measurement: 'mm'
    state_class: measurement
    device_class: distance

  - platform: template
    name: "Target 1 Angle"
    id: target1_angle
    accuracy_decimals: 0
    unit_of_measurement: '°'
    state_class: measurement

  - platform: template
    name: "Target 2 Angle"
    id: target2_angle
    accuracy_decimals: 0
    unit_of_measurement: '°'
    state_class: measurement

  - platform: template
    name: "Target 3 Angle"
    id: target3_angle
    accuracy_decimals: 0
    unit_of_measurement: '°'
    state_class: measurement

  - platform: template
    name: "Target 1 Distance"
    id: target1_distance
    accuracy_decimals: 0
    unit_of_measurement: 'mm'
    state_class: measurement
    device_class: distance

  - platform: template
    name: "Target 2 Distance"
    id: target2_distance
    accuracy_decimals: 0
    unit_of_measurement: 'mm'
    state_class: measurement
    device_class: distance

  - platform: template
    name: "Target 3 Distance"
    id: target3_distance
    accuracy_decimals: 0
    unit_of_measurement: 'mm'
    state_class: measurement
    device_class: distance

  - platform: template
    name: "Zone 1 Target Count"
    id: zone1_target_count
    accuracy_decimals: 0

  - platform: template
    name: "Zone 2 Target Count"
    id: zone2_target_count
    accuracy_decimals: 0
    disabled_by_default: true

  - platform: template
    name: "Zone 3 Target Count"
    id: zone3_target_count
    accuracy_decimals: 0
    disabled_by_default: true

  - platform: template
    name: "Zone 4 Target Count"
    id: zone4_target_count
    accuracy_decimals: 0
    disabled_by_default: true

uart:
  id: uart_bus
  tx_pin: 
    number: GPIO17
    mode:
      input: true
      pullup: true
  rx_pin: 
    number: GPIO16
    mode:
      input: true
      pullup: true
  baud_rate: 256000
  parity: NONE
  stop_bits: 1
  data_bits: 8
  debug:
    direction: BOTH
    dummy_receiver: True
    after:
      delimiter: [0X55, 0XCC]
    sequence:
      # - lambda: UARTDebug::log_hex(direction, bytes, ' ');
      - lambda: |-
          if ((millis() - id(mmwave_update_time)) <= 250) { 
            return;
          };
          id(mmwave_update_time) = millis();

          int16_t p1_x = (uint16_t((bytes[5] << 8) | bytes[4] ));
          if ((bytes[5] & 0x80) >> 7){
            p1_x -= pow(2, 15); 
          }else{
            p1_x = 0 - p1_x; // was 0 - p1_x;
          }

          int16_t p1_y = (uint16_t((bytes[7] << 8) | bytes[6] ));
          if ((bytes[7] & 0x80) >> 7){
            p1_y -= pow(2, 15);
          }else{
            p1_y = 0 - p1_y;
          }

          float p1_speed = (bytes[9] << 8 | bytes[8] );
          if ((bytes[9] & 0x80) >> 7){
            p1_speed -= pow(2, 15);
          }else{
            p1_speed = 0 - p1_speed;
          }
          int16_t p1_distance_resolution = (uint16_t((bytes[11] << 8) | bytes[10] )); 

          int16_t p2_x = (uint16_t((bytes[13] << 8) | bytes[12] ));
          if ((bytes[13] & 0x80) >> 7){
            p2_x -=  pow(2, 15); 
          }else{
            p2_x = 0 - p2_x;
          }

          int16_t p2_y = (uint16_t((bytes[15] << 8) | bytes[14] ));
          if ((bytes[15] & 0x80) >> 7){
            p2_y -= pow(2, 15);
          }else{
            p2_y = 0 - p2_y;
          }

          float p2_speed = (bytes[17] << 8 | bytes[16] );
          if ((bytes[17] & 0x80) >> 7){
            p2_speed -= pow(2, 15);
          }else{
            p2_speed = 0 - p2_speed;
          }
          int16_t p2_distance_resolution = (uint16_t((bytes[19] << 8) | bytes[18] )); 

          int16_t p3_x = (uint16_t((bytes[21] << 8) | bytes[20] ));
          if ((bytes[21] & 0x80) >> 7){
            p3_x -=  pow(2, 15); 
          }else{
            p3_x = 0 - p3_x;
          }

          int16_t p3_y = (uint16_t((bytes[23] << 8) | bytes[22] ));
          if ((bytes[23] & 0x80) >> 7){
            p3_y -= pow(2, 15);
          }else{
            p3_y = 0 - p3_y;
          }

          float p3_speed = (bytes[25] << 8 | bytes[24] );
          if ((bytes[25] & 0x80) >> 7){
            p3_speed -= pow(2, 15);
          }else{
            p3_speed = 0 - p3_speed;
          }
          int16_t p3_distance_resolution = (uint16_t((bytes[27] << 8) | bytes[26] ));

          const float RADIANS_TO_DEGREES = 180.0 / 3.14159265358979323846;
          float p1_angle = atan2(p1_y, p1_x) * RADIANS_TO_DEGREES;
          float p2_angle = atan2(p2_y, p2_x) * RADIANS_TO_DEGREES;
          float p3_angle = atan2(p3_y, p3_x) * RADIANS_TO_DEGREES;
          
          float p1_distance = sqrt(p1_x * p1_x + p1_y * p1_y);
          float p2_distance = sqrt(p2_x * p2_x + p2_y * p2_y);
          float p3_distance = sqrt(p3_x * p3_x + p3_y * p3_y);
          

          float max_distance = float(id(distance).state) * 10;
          if (p1_distance < max_distance) {
            if (id(target1_x).state != p1_x)
              id(target1_x).publish_state(p1_x);
            if (id(target1_y).state != p1_y)
              id(target1_y).publish_state(p1_y);
            p1_speed /= 100.0;
            if (id(target1_speed).state != p1_speed)
              id(target1_speed).publish_state(p1_speed);
            if (id(target1_resolution).state != p1_distance_resolution)
              id(target1_resolution).publish_state(p1_distance_resolution);
            if (id(target1_distance).state != p1_distance)
              id(target1_distance).publish_state(p1_distance);
            p1_angle -= 90;
            if (id(target1_angle).state != p1_angle)
              id(target1_angle).publish_state(p1_angle);
          } else {
            if (id(target1_x).state != 0)
              id(target1_x).publish_state(0);
            if (id(target1_y).state != 0)
              id(target1_y).publish_state(0);
            if (id(target1_speed).state != 0)
              id(target1_speed).publish_state(0);
            if (id(target1_resolution).state != 0)
              id(target1_resolution).publish_state(0);
            if (id(target1_distance).state != 0)
              id(target1_distance).publish_state(0);
            if (id(target1_angle).state != 0)
              id(target1_angle).publish_state(0);
          }

          if (p2_distance < max_distance) {
            if (id(target2_x).state != p2_x)
              id(target2_x).publish_state(p2_x);
            if (id(target2_y).state != p2_y)
              id(target2_y).publish_state(p2_y);
            p2_speed /= 100.0;
            if (id(target2_speed).state != p2_speed)
              id(target2_speed).publish_state(p2_speed);
            if (id(target2_resolution).state != p2_distance_resolution)
              id(target2_resolution).publish_state(p2_distance_resolution);
            if (id(target2_distance).state != p2_distance)
              id(target2_distance).publish_state(p2_distance);
            p2_angle -= 90;
            if (id(target2_angle).state != p2_angle)
              id(target2_angle).publish_state(p2_angle);
          } else {
            if (id(target2_x).state != 0)
              id(target2_x).publish_state(0);
            if (id(target2_y).state != 0)
              id(target2_y).publish_state(0);
            if (id(target2_speed).state != 0)
              id(target2_speed).publish_state(0);
            if (id(target2_resolution).state != 0)
              id(target2_resolution).publish_state(0);
            if (id(target2_distance).state != 0)
              id(target2_distance).publish_state(0);
            if (id(target2_angle).state != 0)
              id(target2_angle).publish_state(0);
          }

          if (p3_distance < max_distance) {
            if (id(target3_x).state != p3_x)
              id(target3_x).publish_state(p3_x);
            if (id(target3_y).state != p3_y)
              id(target3_y).publish_state(p3_y);
            p3_speed /= 100.0;
            if (id(target3_speed).state != p3_speed)
              id(target3_speed).publish_state(p3_speed);
            if (id(target3_resolution).state != p3_distance_resolution)
              id(target3_resolution).publish_state(p3_distance_resolution);
            if (id(target3_distance).state != p3_distance)
              id(target3_distance).publish_state(p3_distance);
            p3_angle -= 90;
            if (id(target3_angle).state != p3_angle)
              id(target3_angle).publish_state(p3_angle);
          } else {
            if (id(target3_x).state != 0)
              id(target3_x).publish_state(0);
            if (id(target3_y).state != 0)
              id(target3_y).publish_state(0);
            if (id(target3_speed).state != 0)
              id(target3_speed).publish_state(0);
            if (id(target3_resolution).state != 0)
              id(target3_resolution).publish_state(0);
            if (id(target3_distance).state != 0)
              id(target3_distance).publish_state(0);
            if (id(target3_angle).state != 0)
              id(target3_angle).publish_state(0);
          }

          int zone1_count = 0;      
          if (id(target1_active).state == true ) {
              if ((id(target1_x).state >= id(zone1_begin_x).state && id(target1_x).state <= id(zone1_end_x).state) &&
                  (id(target1_y).state >= id(zone1_begin_y).state && id(target1_y).state <= id(zone1_end_y).state)) {
                  zone1_count++;
              }
          }

          if (id(target2_active).state == true ) {
              if ((id(target2_x).state >= id(zone1_begin_x).state && id(target2_x).state <= id(zone1_end_x).state) &&
                  (id(target2_y).state >= id(zone1_begin_y).state && id(target2_y).state <= id(zone1_end_y).state)) {
                  zone1_count++;
              }
          }

          if (id(target3_active).state == true ) {
              if ((id(target3_x).state >= id(zone1_begin_x).state && id(target3_x).state <= id(zone1_end_x).state) &&
                  (id(target3_y).state >= id(zone1_begin_y).state && id(target3_y).state <= id(zone1_end_y).state)) {
                  zone1_count++;
              }
          }

          if (zone1_count > 0) {
            if (id(zone1_occupancy).state != true)
              id(zone1_occupancy).publish_state(true);
            if (id(zone1_target_count).state != zone1_count)
              id(zone1_target_count).publish_state(zone1_count);
          } else {
            if (id(zone1_occupancy).state != false)
              id(zone1_occupancy).publish_state(false);
            if (id(zone1_target_count).state != 0)
              id(zone1_target_count).publish_state(0);
          }

          int zone2_count = 0;
          if (id(target1_active).state == true ) {
              if ((id(target1_x).state >= id(zone2_begin_x).state && id(target1_x).state <= id(zone2_end_x).state) &&
                  (id(target1_y).state >= id(zone2_begin_y).state && id(target1_y).state <= id(zone2_end_y).state)) {
                  zone2_count++;
              }
          }
          if (id(target2_active).state == true ) {
              if ((id(target2_x).state >= id(zone2_begin_x).state && id(target2_x).state <= id(zone2_end_x).state) &&
                  (id(target2_y).state >= id(zone2_begin_y).state && id(target2_y).state <= id(zone2_end_y).state)) {
                  zone2_count++;
              }
          }
          if (id(target3_active).state == true ) {
              if ((id(target3_x).state >= id(zone2_begin_x).state && id(target3_x).state <= id(zone2_end_x).state) &&
                  (id(target3_y).state >= id(zone2_begin_y).state && id(target3_y).state <= id(zone2_end_y).state)) {
                  zone2_count++;
              }
          }
          if (zone2_count > 0) {
            if (id(zone2_occupancy).state != true)
              id(zone2_occupancy).publish_state(true);
            if (id(zone2_target_count).state != zone2_count)
              id(zone2_target_count).publish_state(zone2_count);
          } else {
            if (id(zone2_occupancy).state != false)
              id(zone2_occupancy).publish_state(false);
            if (id(zone2_target_count).state != 0)
              id(zone2_target_count).publish_state(0);
          }

          int zone3_count = 0;
          if (id(target1_active).state == true ) {
              if ((id(target1_x).state >= id(zone3_begin_x).state && id(target1_x).state <= id(zone3_end_x).state) &&
                  (id(target1_y).state >= id(zone3_begin_y).state && id(target1_y).state <= id(zone3_end_y).state)) {
                  zone3_count++;
              }
          }
          if (id(target2_active).state == true ) {
              if ((id(target2_x).state >= id(zone3_begin_x).state && id(target2_x).state <= id(zone3_end_x).state) &&
                  (id(target2_y).state >= id(zone3_begin_y).state && id(target2_y).state <= id(zone3_end_y).state)) {
                  zone3_count++;
              }
          }
          if (id(target3_active).state == true ) {
              if ((id(target3_x).state >= id(zone3_begin_x).state && id(target3_x).state <= id(zone3_end_x).state) &&
                  (id(target3_y).state >= id(zone3_begin_y).state && id(target3_y).state <= id(zone3_end_y).state)) {
                  zone3_count++;
              }
          }
          if (zone3_count > 0) {
            if (id(zone3_occupancy).state != true)
              id(zone3_occupancy).publish_state(true);
            if (id(zone3_target_count).state != zone3_count)
              id(zone3_target_count).publish_state(zone3_count);
          } else {
            if (id(zone3_occupancy).state != false)
              id(zone3_occupancy).publish_state(false);
            if (id(zone3_target_count).state != 0)
              id(zone3_target_count).publish_state(0);
          }

          int zone4_count = 0;
          if (id(target1_active).state == true ) {
              if ((id(target1_x).state >= id(zone4_begin_x).state && id(target1_x).state <= id(zone4_end_x).state) &&
                  (id(target1_y).state >= id(zone4_begin_y).state && id(target1_y).state <= id(zone4_end_y).state)) {
                  zone4_count++;
              }
          }
          if (id(target2_active).state == true ) {
              if ((id(target2_x).state >= id(zone4_begin_x).state && id(target2_x).state <= id(zone4_end_x).state) &&
                  (id(target2_y).state >= id(zone4_begin_y).state && id(target2_y).state <= id(zone4_end_y).state)) {
                  zone4_count++;
              }
          }
          if (id(target3_active).state == true ) {
              if ((id(target3_x).state >= id(zone4_begin_x).state && id(target3_x).state <= id(zone4_end_x).state) &&
                  (id(target3_y).state >= id(zone4_begin_y).state && id(target3_y).state <= id(zone4_end_y).state)) {
                  zone4_count++;
              }
          }
          if (zone4_count > 0) {
            if (id(zone4_occupancy).state != true)
              id(zone4_occupancy).publish_state(true);
            if (id(zone4_target_count).state != zone4_count)
              id(zone4_target_count).publish_state(zone4_count);
          } else {
            if (id(zone4_occupancy).state != false)
              id(zone4_occupancy).publish_state(false);
            if (id(zone4_target_count).state != 0)
              id(zone4_target_count).publish_state(0);
          }

